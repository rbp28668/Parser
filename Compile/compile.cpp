#include <stdio.h>
#include <string.h>
#include <assert.h>
#include <stdlib.h>
#include <io.h>
#include <sys\types.h>
#include <sys\stat.h>
#include <fcntl.h>

#include "token.h"

enum toks {	colon=LAST_STD_TOKEN+1,period,
			prefix,noprefix,index,include};

static TOKELEMENT toklist[] =
	{
	colon,":",
	period,".",
	prefix,"PREFIX",
	noprefix,"NOPREFIX",
	index,"INDEX",
	include,"INCLUDE",
	0,NULL
	};
	
static char prefstr[20]={'\0'};	/* label prefix string */
static char incfname[FILENAME_MAX]="";/* include file name */
static int labindex=0;				/* label index counter */
static int lastindex;				/* records last index used */
static long labfpos;				/* file pointer for labels */
static long textfpos;				/* file pointer for text */
static char tbuff[256];			/* temp string buffer */

void error(char *str)
{
	fprintf(stderr,"\n\nERROR: %s\n",str);
	if(tok_getline()!=0) fprintf(stderr,"on line %d\n",tok_getline());
	exit(1);
}

#if 0
void tokdump(int tok, void *value)
{
int i;
switch(tok)
	{
	case STRING:
		fprintf(stderr,"STRING is <%s>\n",value);
		break;
	case INT:
		fprintf(stderr,"INT is %d\n",*((int*) value));
		break;
	case REAL:
		fprintf(stderr,"REAL is %f\n",*((float*)value));
		break;
	case IDENT:
		fprintf(stderr,"IDENT is <%s>\n",value);
		break;
	case FLT:
		fprintf(stderr,"FLT is <%s>\n",value);
		break;
	default:
		for(i=0;toklist[i].match!=NULL;++i)
			{
			if(toklist[i].tok==tok)
				{
				fprintf(stderr,"Keyword: %s\n",toklist[i].match);
				break;
				}
			}
		break;
	}
}
#endif
		
void pass1(FILE *infp,FILE* outfp, FILE *deffp)
{
int tok;
void *tokvalue;
FILE *incfp;						/* include file pointer */
char label[256];					/* remember ident for writing string */


// Write preamble:
fprintf(outfp,"/* This file auto-generated by compile */\n");
fprintf(outfp,"#include \"Parser.h\"\n");
fprintf(outfp,"#include \"Errcode.h\"\n");
fprintf(outfp,"\n");
fprintf(outfp,"CParser::ERRORMSG CParser::errStrings[] = {\n");

tok_setstream(infp);				/* set input to current file */
tok_setline(1);						/* starting at line 1 */
while((tok=tok_get(&tokvalue))!=EOF)
	{
	switch(tok)
		{
		case IDENT:
			fprintf(deffp,"#define %s%s %d\n",prefstr,tokvalue,labindex);
			strcpy(label,prefstr);
			strcat(label,(char*)tokvalue); 
			++labindex;
			if((tok=tok_get(&tokvalue))==EOF)
				error("Premature EOF");
			if(tok!=colon)
				error("Label must have :");
			break;

		case STRING:
			{
			char* str = (char *)tokvalue;
			fprintf(outfp,"%s,\"%s\",\n",label,str);
			}
			break;

		case prefix:							/* prefix string */
			if((tok=tok_get(&tokvalue))==EOF)
				error("Premature EOF\n");

			if(tok!=IDENT)
				error("Illegal prefix");

			strcpy(prefstr,(char*)tokvalue);
			break;

		case noprefix:
			*prefstr='\0';						/* zap prefix string */
			break;

		case index:
			if((tok=tok_get(&tokvalue))==EOF)
				error("Premature EOF\n");
			if(tok!=INT)
				error("Index requires an integer");
			if( *((int *)tokvalue)<=labindex)
				error("Illegal index value");
			labindex=*((int *)tokvalue);
			break;

		case include:
			if((tok=tok_get(&tokvalue))==EOF) error("Premature EOF\n");
 			if(tok!=STRING) error("Missing string for include file");
 			strcpy(incfname,(char *)tokvalue);
			printf("Using include file %s starting at %d\n",incfname,labindex);
			if ((incfp=fopen(incfname,"r"))==NULL)
				error("Could not open include file");

			pass1(incfp,outfp,deffp);				/* go and parse include file */

			tok_setstream(infp);			/* restore input stream */
			fclose(incfp);					/* and close include file */
		   
			break;

		default:
			error("Funny looking token in input");
			break;
		}
	}

	// Write postamble
	fprintf(outfp,"0,0\n");
	fprintf(outfp,"};\n");

}


main(int argc,char *argv[])
{
	FILE* infp = 0;
	FILE* outfp = 0;
	FILE* deffp = 0;

	if (argc!=4)
		error("USAGE: <textfile> <langfile> <includefile>");

	if ((infp=fopen(argv[1],"r"))==NULL)
		error("Could not open input file");

	if((outfp = fopen(argv[2],"w")) == NULL)
		error("Could not open output file");

	if((deffp=fopen(argv[3],"w"))==NULL)
		error("Could not open definitions file");

	tok_setesc('^');
	tok_setquote('\'');
	tok_setlist(toklist);

	pass1(infp,outfp,deffp);

	fclose(deffp);
	fclose(outfp);
	fclose(infp);

	return(0);
}







